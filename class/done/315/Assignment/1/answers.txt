HW1
Connor Deakin
17/01/2018

<=== 1.6 ===>
Speed
P1: 1.04 ms
P2: 0.66 ms
P2 is faster

- a -
Global CPI
P1: 2.6
P2: 2.0

- b -
Clock Cycles
P1: 2.6E6
P2: 2E6

<=== 1.9 ===>

- .1 -
Speeds
p = 1: 13.44s
p = 2: 7.04s, 1.90x faster
p = 4: 3.84s, 3.50x faster
p = 8: 2.24s, 6.00x faster

- .2 -
Double Arithmetic Speeds
p = 1: +1.83s
p = 2: +0.91s
p = 4: +0.46s
p = 8: +0.23s

- .3 -
New load/store CPI
CPI: <= 1.5

<=== 1.10 ===>

- .1 -
W1 Yield: 97%
W2 Yield: 94%

<=== 1.12 ===>

- .1 -
P1 time: 1.125s
P2 time: 0.25s
P1 has a higher clock cycle but takes longer to execute all of its instructions.

- .2 -
P2 instructions: 9.0E8

- .3 -
P1: 4,444 MIPS
P2: 4,000 MIPS
P1 has a higher MIPS value but still has a higher execution time.

- .4 -
P1: 1777.8 MFLOPS
P2: 1600.0 MFLOPS

<=== 1.14 ===>

- .1 -
We cannot get the program to run twice as fast by modifying only the floating point CPI. This is due to the fact that floating point operations only take 9% of the program's total execution time.

- .2 -
CPI of L/S = 0.8

- .3 -
New time: 0.17s
Reduction: -0.084s
Speed factor: 1.50x faster

<=== 1.15 ===>

P   | Ideal Time | Actual Time | Ideal Speedup Factor | Actual Speedup Factor
------------------------------------------------------------------------------
1   | 100s       | 100s        | 1                    | 1
2   | 50s        | 54s         | 2                    | 1.85
4   | 25s        | 29s         | 4                    | 3.45
8   | 12.5s      | 16.5s       | 8                    | 6.06
16  | 6.25s      | 10.3s       | 16                   | 9.76
32  | 3.13s      | 7.14s       | 32                   | 14.0
64  | 1.56s      | 5.56s       | 64                   | 18.0
128 | 0.78s      | 4.78s       | 128                  | 20.9
