Part 1:
======
Implement Game of Life on NxN using N^2 threads - one per cell. 
All N^2 threads should be created in the beginning of the simulation 
and deleted in the end - i.e. do not delete/create threads between 
iterations. Use pre-C++11 POSIX threads - only basic mutex and 
semaphore functionality (i.e. do NOT use built-in barriers).

Read initial position from file:
first pair of integers - X,Y dimensions
each next pair of integers from range [0,X-1]x[0,Y-1]
5 5 
0 0 
1 1 
2 2 
3 3 
4 4 
defines 5x5 envirionment with 5 live cells on the diagonal
+-----+
|*    |
| *   |
|  *  |
|   * |
|    *|
+-----+

Algorithm:
you are NOT allowed to use a second array. (I'll check that manually).
Therefore each thread runs in 2 steps:
- read data from neighbors
- calculate the next state
- wait all threads to finish their calculations
- write the state back to array
- wait all threads to finish their writes
- goto 1st line

your program should accept 3 arguments: 
file with initial population
number of iterations to calculate
file to output the resulting population (same format as input)

Part 2: predefined areas for each thread
======
Implement Game of Life on NxN using a given number of threads.
Your driver has to specify which region each thread is working with (similar to Julia set example)

You ARE ALLOWED to use a second array.

your program should accept 4 arguments: 
the number of threads to use
file with initial population
number of iterations to calculate
file to output the resulting population (same format as input)

Part 3: bag of tasks
======
Implement Game of Life on NxN using a given number of threads.
Your driver creates a stack of all cells that need to be processed and
starts specified number of threads. Each thread reads coordinates of the cell 
from the stack, calculates the next state and places the new state into output 
stack. When input stack is empty, the thread that discovered that updates the array
and re-initializes (adds all cells) next input stack.

You ARE ALLOWED to use a second array instead of output stack.

your program should accept 4 arguments: 
the number of threads to use
file with initial population
number of iterations to calculate
file to output the resulting population (same format as input)

Part 4: 
======
Implement Game of Life on NxN using N^2 of threads.
The big idea: thread does not recalculate the state UNLESS some of the neighbors have been 
modified during previous iteration. Have a second array of booleans that is updated like
this: if state of (x,y) changes set 8 booleans corresponding to its neighbors to true.
Each thread first checks corresponding boolean, if it's false - do nothing.


################################################################################
From Wikipedia with small changes:
The universe of the Game of Life is an NxN (originally infinite) two-dimensional orthogonal grid
of square cells, each of which is in one of two possible states, alive or dead,
or "populated" or "unpopulated". Every cell interacts with its eight
neighbours, which are the cells that are horizontally, vertically, or
diagonally adjacent. At each step in time, the following transitions occur:

- Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.
- Any live cell with two or three live neighbours lives on to the next generation.
- Any live cell with more than three live neighbours dies, as if by overpopulation.
- Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

Grid wraps around, i.e. neighbors of (x,y) are

(x+N-1%N,y+N-1%N)    (x+N-1%N,y)     (x+N-1%N,y+1%N)
(x,      y+N-1%N)                    (x,      y+1%N)
(x+1%N,  y+N-1%N)    (x+1,    y)     (x+1%N,  y+1%N)

The initial pattern constitutes the seed of the system. The first generation is
created by applying the above rules simultaneously to every cell in the
seedâ€”births and deaths occur simultaneously, and the discrete moment at which
this happens is sometimes called a tick (in other words, each generation is a
pure function of the preceding one). The rules continue to be applied
repeatedly to create further generations.
